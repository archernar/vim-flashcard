
FLASHCARD 1
1 Moving by Characters, Words and Tokens

h – move the cursor left
j – move the cursor down
k – move the cursor up
l – move the cursor right

5j the cursor moves down 5 lines.

b – move to the start of a word
B – move to the start of a token
w – move to the start of the next word
W – move to the start of the next token
e – move to the end of a word
E – move to the end of a token
FLASHCARD 2
2 Movement

;   - repeat previous f, t, F or T movement
,   - repeat previous f, t, F or T movement, backwards
}   - jump to next paragraph
{   - jump to previous paragraph

Moving by Lines

0 (zero) – jump to the beginning of the line
$ – jump to the end of the line
^ – jump to the first (non-blank) char of the line
#G / #gg / :# – move to a line number
FLASHCARD 3
3 Moving by Screens

Ctrl + b – move back one full screen
Ctrl + f – move forward one full screen
Ctrl + d – move forward 1/2 a screen
Ctrl + u – move back 1/2 a screen
Ctrl + e – move screen down one line (not cursor)
Ctrl + y – move screen up one line (not cursor)
Ctrl + o – move backward through the jump history
Ctrl + i – move forward through the jump history

H  – move to the top of the screen (H=high)
M  – move to the middle of the screen (M=middle)
L  – move to the bottom of the screen (L=low)
zz - center cursor on screen
FLASHCARD 4
4 Search in File

*     – jump to the next instance of the current word
#     – jump to previous instance of the current word
/ptrn – search forward for the specified pattern
?ptrn – search backward for the specified pattern
n     – repeat the search in the same direction
N     – repeat the search in the opposite direction

Macros

qa  – record macro a
q   – stop recording macro
@a  – run macro a
@@  – run last macro again
FLASHCARD
5 Visual Mode

gv - last visual selection
v  – select text using character mode
V  – select lines using line mode
o  – move from one end of the selected text to the other
aw – select a word
ab – select a block with ()
aB – select a block with {}
at – select a block with <>
ib – select inner block with ()
iB – select inner block with {}
it – select inner block with <>
Ctrl+v – select text using block mode
FLASHCARD
6 Editing Text

r        – replace a single char (goto command mode)
cc       – replace an entire line (goto insert mode)
C / c$   – replace from the cursor to the end of a line
cw       – replace from the cursor to the end of a word
s        – delete a character (goto insert mode)
J        – merge the line below with a space in between
gJ       – merge the line below with no space in between t
u        – undo
Ctrl + r – redo
.        – repeat last command
FLASHCARD
7 Working with Multiple Files

:e fname  – open a file in a new buffer
:bn       – move to the next buffer
:bp       – go back to previous buffer
:bd       – close buffer
:b#       – move to the specified buffer (by number)
:b fname  – move to a buffer (by name)
:ls       – list all open buffers
:sp fname – open a file in a new buffer with horz split
:vs fname – open a file in a new buffer with vert split
:vert ba  – edit all files as vertical viewports
:tab ba   – edit all buffers as tabs
gt        – move to next tab
gT        – move to previous tab
FLASHCARD
8 Marks and Jumps

m[a-z] – mark text using character mode (from a to z)
M[a-z] – mark lines using line mode (from a to z)
`a     - jump to position marked a
`y`a   – yank text to position marked >a>
`.     – jump to last change in file
`0     – jump to position where Vim was last exited
``     – jump to last jump
:marks – list all marks
:jumps – list all jumps
:changes – list all changes
Ctrl+i – move to next instance in jump list
Ctrl+o – move to previous instance in jump list
g, – move to next instance in change list
g; – move to previous instance in change list
FLASHCARD
9 Macros

q<k>  - enter and exit macro for key <k>
@<k>  - execute macro <k>
@@    - execute last executed macro

Text Objects

word:           w   sentence:       s    paragraph:    p
single quotes:  a'  double quotes:  a"   parentheses:  a)
brackets:       a]  braces:         a}   HTML tags:    at
angle brackets: a>

ci<o>  - change inner text object
ca<o>  - change around the text object (incl whitespace)
FLASHCARD
10 Reminders

i     - enter insert mode
I     - goto start of line and enter insert mode
FLASHCARD
11 bash header

#!/bin/bash
SCR=$(echo "$0" | gawk '{n=split($0, a, "/"); print a[n];}')
Tmp=/tmp/$$
Tmp1="/tmp/"$SCR"_"$$
Tmp2="/tmp/"$SCR"_"$$"_"$$
Tmp3="/tmp/"$SCR"_"$$"_"$$"_"$$
Tmp4="/tmp/"$SCR"_"$$"_"$$"_"$$"_"$$
trap 'exit 0' INT HUP QUIT TERM ALRM USR1
trap 'rm -f "$Tmp" "$Tmp1" "$Tmp2" "$Tmp3" "$Tmp4"' EXIT
rm -f "$Tmp"  >/dev/null 2>&1
rm -f "$Tmp1" >/dev/null 2>&1
rm -f "$Tmp2" >/dev/null 2>&1
rm -f "$Tmp3" >/dev/null 2>&1
rm -f "$Tmp4" >/dev/null 2>&1
FLASHCARD
String Functions Description

asort(s [, d])
Returns the number of elements in the source array s. The contents of s are sorted using gawk's
normal rules for comparing values, and the indexes of the sorted values of s are replaced with
sequential integers starting with 1.

If the optional destination array d is specified, then s is first duplicated into d, and then d
is sorted, leaving the indexes of the source array s unchanged.

asorti(s [, d])
Returns the number of elements in the source array s. The behavior is the same as that of asort(),
except that the array indices are used for sorting, not the array values. When done, the array is
indexed numerically, and the values are those of the original indices.

The original values are lost; thus provide a second array if you wish to preserve the original.

gensub(r, s, h [, t])
Search the target string t for matches of the regular expression r. If h is a string beginning with g or
G, then replace all matches of r with s. Otherwise, h is a number indicating which match of r to
replace. If t is not supplied, $0 is used instead. Within the replacement text s, the sequence \n, where
n is a digit from 1 to 9, may be used to indicate just the text that matched the n'th parenthesized
subexpression. The sequence \0 represents the entire matched text, as does the character &. Unlike
sub() and gsub(), the modified string is returned as the result of the function, and the original target
string is not changed.

gsub(r, s [, t])
For each substring matching the regular expression r in the string t, substitute the string s, and return
the number of substitutions. If t is not supplied, use $0. An & in the replacement text is replaced with
the text that was actually matched. Use \& to get a literal &. (This must be typed as "\\&")
index(s, t) Returns the index of the string t in the string s, or 0 if t is not present.
(This implies that character indices start at one.)

length([s])
Returns the length of the string s, or the length of $0 if s is not supplied.

match(s, r [, a])
Returns the position in s where the regular expression r occurs, or 0 if r is not present, and sets the
values of RSTART and RLENGTH. Note that the argument order is the same as for the ~ operator:
str ~ re. If array a is provided, a is cleared and then elements 1 through n are filled with the portions
of s that match the corresponding parenthesized subexpression in r. The 0'th element of a contains
the portion of s matched by the entire regular expression r. Subscripts a[n, "start"], and a[n, "length"]
provide the starting index in the string and length respectively, of each matching substring.

split(s, a [, r])i
Splits the string s into the array a on the regular expression r, and returns the number of fields.
If r is omitted, FS is used instead. The array a is cleared first. Splitting behaves identically to
field splitting.

sprintf(fmt, expr-list)
Prints expr-list according to fmt, and returns the resulting string.

strtonum(str)
Examines str, and returns its numeric value. If str begins with a leading 0, strtonum() assumes that
str is an octal number. If str begins with a leading 0x or 0X, strtonum() assumes that str is a
hexadecimal number.

sub(r, s [, t])
Just like gsub(), but only the first matching substring is replaced.

substr(s, i [, n]) 
Returns the at most n-character substring of s starting at i. If n is omitted, the rest of s is used.

tolower(str)
Returns a copy of the string str, with all the upper-case characters in str translated to their
corresponding lower-case counterparts. Non-alphabetic characters are left unchanged.

toupper(str)
Returns a copy of the string str, with all the lower-case characters in str translated to their
corresponding upper-case counterparts. Non-alphabetic characters are left unchanged. 
FLASHCARD

